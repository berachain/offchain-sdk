// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	eth "github.com/berachain/offchain-sdk/v2/client/eth"
	mock "github.com/stretchr/testify/mock"
)

// ConnectionPool is an autogenerated mock type for the ConnectionPool type
type ConnectionPool struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *ConnectionPool) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Dial provides a mock function with given fields: _a0
func (_m *ConnectionPool) Dial(_a0 string) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Dial")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DialContext provides a mock function with given fields: _a0, _a1
func (_m *ConnectionPool) DialContext(_a0 context.Context, _a1 string) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DialContext")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetHTTP provides a mock function with given fields:
func (_m *ConnectionPool) GetHTTP() (eth.Client, bool) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetHTTP")
	}

	var r0 eth.Client
	var r1 bool
	if rf, ok := ret.Get(0).(func() (eth.Client, bool)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() eth.Client); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(eth.Client)
		}
	}

	if rf, ok := ret.Get(1).(func() bool); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GetWS provides a mock function with given fields:
func (_m *ConnectionPool) GetWS() (eth.Client, bool) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetWS")
	}

	var r0 eth.Client
	var r1 bool
	if rf, ok := ret.Get(0).(func() (eth.Client, bool)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() eth.Client); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(eth.Client)
		}
	}

	if rf, ok := ret.Get(1).(func() bool); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// RemoveChainClient provides a mock function with given fields: _a0
func (_m *ConnectionPool) RemoveChainClient(_a0 string) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for RemoveChainClient")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewConnectionPool creates a new instance of ConnectionPool. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConnectionPool(t interface {
	mock.TestingT
	Cleanup(func())
}) *ConnectionPool {
	mock := &ConnectionPool{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
